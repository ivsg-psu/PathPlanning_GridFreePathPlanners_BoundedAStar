function route_dense = fcn_interpolate_route_in_time(route,dt)
warning('on','backtrace');
warning(['fcn_interpolate_route_in_time is being deprecated. ' ...
    'Use fcn_BoundedAStar_interpolateRouteInTime instead.']);

% fcn_interpolate_route_in_time
%
% Adds waypoints to the input route to increase the density of points according to the input time
% step. This is useful prior to crafting an animation to get the route and polytopes to have the same time step.
%
%
% FORMAT:
%
% route_dense = fcn_interpolate_route_in_time(route,dt)
%
% INPUTS:
%
%     route: the matrix as produced by fcn_algorithm_Astar3d consisting of waypoints.  Each row is a
%     waypoint, and each column is x, y, and t, and point ID
%
%     dt: the desired time step for interpolating the route waypoints
%
% OUTPUTS:
%     route_dense: the matrix representing the interpolated route consisting of waypoints.  Each row is a
%     waypoint, and each column is x, y, and t
%
% DEPENDENCIES:
% generally, the input for this function can be generated by fcn_algorithm_Astar3d
% but this is not a strictly necessary dependency
% see script_test_3d_polytope_multiple or the readme for an example of the typical call order
%
% EXAMPLES:
%
% See the script: script_test_3d_polytope_multiple
% for a full test suite.
%
% This function was written on summer 2023 by Steve Harnett
% Questions or comments? contact sjharnett@psu.edu

%
% REVISION HISTORY:
%
% 2023, summer by Steve Harnett
% -- first write of function
%
% TO DO:


    %% interpolation code for a route

    unique_times = unique(route(:,3)); % find the number of unique times in the route
    num_unique_times = length(unique(route(:,3)));

    num_route_verts = size(route,1);

    % first, linearly interpolated between existing timestamps
    dense_times = [];
    for i = 2:1:num_unique_times
        new_times = unique_times(i-1):dt:unique_times(i);
        dense_times = [dense_times; new_times'];
    end
    dense_times = unique(dense_times); % remove duplicates
    num_dense_times = length(dense_times);


    % for each waypoint, want to interpolate x and y position by the dense times
    try
        route_dense_x = interp1(route(:,3),route(:,1),dense_times);
    catch
        % interpolation may fail if the route has a stationary segment
        route_dense_x = route(1,1)*ones(size(dense_times,1),size(dense_times,2));
    end
    try
        route_dense_y = interp1(route(:,3),route(:,2),dense_times);
    catch
        % interpolation may fail if the route has a stationary segment
        route_dense_y = route(1,2)*ones(size(dense_times,1),size(dense_times,2));
    end
    % create a new route based on the more dense waypoints
    route_dense = [route_dense_x route_dense_y dense_times];
end
