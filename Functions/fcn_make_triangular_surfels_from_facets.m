function all_surfels = fcn_make_triangular_surfels_from_facets(time_space_polytopes)
% fcn_make_triangular_surfels_from_facets
% Decomposes timespace polytopes with facets into triangular surface elements (surfels) which are necessary for
% performing intersection checking between possible visibity graph edges and polytope obstacles.
%
%
%
% FORMAT:
% all_surfels = fcn_make_triangular_surfels_from_facets(time_space_polytopes)
%
% INPUTS:
%
%   time_space_polytopes: the 3D (XYT) polytope struct array of the form generated by the MapGen repo, typically
%   generated with the functions fcn_MapGen_haltonVoronoiTiling and fcn_MapGen_polytopesShrink*
%   see MapGen repo for examples of how to generate polytope maps with these functions
%
%   max_translation_distance: the maximum distance any polytope will be allowed to translate from
%   time = 0 to the final time.  If this is set at half the gap size, no polytope collisions will occur
%
%   final_time: the end time of the timespace polytopes.  This is the maximum t-axis (z-axis) value
%
%
% OUTPUTS:
%
%     time_space_polytopes: a struct array with a verts field holding the vertices of each polytope
%     verts consists of 4 columns: x position, y position, time (z-axis position) and vertex id
%     the vertex ID is necessary for correctly mapping a vertex at one time to its position at the next time
%
% DEPENDENCIES:
% generally, if timespace polytopes are defined only by their vertices, fcn_make_facets_from_verts
% can be run before this function to create facets for this function to triangulate
% see scritp_test_3d_polytope_multiple or the readme for an example of the typical call order
% but there are no dependencies in the source code of this function
%
% EXAMPLES:
%
% See the script: script_test_3d_polytope_multiple
% for a full test suite.
%
% This function was written on summer 2023 by Steve Harnett
% Questions or comments? contact sjharnett@psu.edu

%
% REVISION HISTORY:
%
% 2023, summer by Steve Harnett
% -- first write of function
%
% TO DO:
%
% -- fill in to-do items here.

    all_surfels = [];
    for i = 1:length(time_space_polytopes)
        flats = time_space_polytopes(i).flats;
        sides = time_space_polytopes(i).sides;
        for j = 1:size(flats,1)
            my_flat = flats(j,:);
            my_flat_matrix = (reshape(my_flat,[4 length(my_flat)/4]))';
            flat_centroid = [mean(my_flat_matrix(:,1)) mean(my_flat_matrix(:,2)) mean(my_flat_matrix(:,3))];
            my_flat_polyshape = polyshape(my_flat_matrix(:,1),my_flat_matrix(:,2));
            my_flat_triangulated = triangulation(my_flat_polyshape);
            tris_this_flat = [];
            for k=1:size(my_flat_triangulated.ConnectivityList,1)
                x1 = my_flat_triangulated.Points(my_flat_triangulated.ConnectivityList(k,1),1);
                y1 = my_flat_triangulated.Points(my_flat_triangulated.ConnectivityList(k,1),2);
                x2 = my_flat_triangulated.Points(my_flat_triangulated.ConnectivityList(k,2),1);
                y2 = my_flat_triangulated.Points(my_flat_triangulated.ConnectivityList(k,2),2);
                x3 = my_flat_triangulated.Points(my_flat_triangulated.ConnectivityList(k,3),1);
                y3 = my_flat_triangulated.Points(my_flat_triangulated.ConnectivityList(k,3),2);
                tris_this_flat = [tris_this_flat; x1 y1 my_flat_matrix(1,3) x2 y2 my_flat_matrix(2,3) x3 y3 my_flat_matrix(3,3)];
            end
            all_surfels = [all_surfels; tris_this_flat];
            % fill3(my_flat_matrix(:,1),my_flat_matrix(:,2),my_flat_matrix(:,3),rand(1,3),'FaceAlpha',0.3);
        end
        for j = 1:size(sides,1)
            my_side = sides(j,:);
            my_side_matrix = (reshape(my_side,[4 length(my_side)/4]))';
            tris_this_side = [my_side_matrix(1,1:3) my_side_matrix(2,1:3) my_side_matrix(3,1:3);...
                              my_side_matrix(1,1:3) my_side_matrix(3,1:3) my_side_matrix(4,1:3)]; % 1 2 3, 1 3 4
            all_surfels = [all_surfels; tris_this_side];
            % fill3(my_side_matrix(:,1),my_side_matrix(:,2),my_side_matrix(:,3),rand(1,3),'FaceAlpha',0.3);
        end
    end
end
