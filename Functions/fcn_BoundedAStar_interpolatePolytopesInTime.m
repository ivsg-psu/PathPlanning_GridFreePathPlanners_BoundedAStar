function [dense_verts, time_space_polytopes_with_dense_verts] = fcn_BoundedAStar_interpolatePolytopesInTime(time_space_polytopes,dt,varargin)
% fcn_BoundedAStar_interpolatePolytopesInTime
% Adds nodes to the input polytopes to increase the density of nodes in the
% time (z) dimension so that the planner has more options of where to route.
%
%
%
% FORMAT:
%
% [dense_verts, time_space_polytopes_with_dense_verts] = fcn_BoundedAStar_interpolatePolytopesInTime(time_space_polytopes,dt,(fig_num))
%
% INPUTS:
%
%     time_space_polytopes: a struct array with a vertices field holding the vertices of each polytope
%     vertices consists of 4 columns: x position, y position, time (z-axis position) and vertex id
%     the vertex ID is necessary for correctly mapping a vertex at one time to its position at the next time
%
%     dt: the desired time step for interpolating the polytope vertices
%
%     (optional inputs)
%
%     fig_num: a figure number to plot results. If set to -1, skips any
%       input checking or debugging, no figures will be generated, and sets
%       up code to maximize speed. As well, if given, this forces the
%       variable types to be displayed as output and as well makes the input
%       check process verbose
%
%
% OUTPUTS:
%
%      dense_verts: matrix of all vertices in the polytope field, after interpolation. Each row should be a point, and each column is x, y, and z or T
%
%      time_space_polytopes_with_dense_verts: time_space_polytopes input struct array, replicated with
%      a new field called dense_verts_this_poly representing the interpolated vertices for each polytope
%
% DEPENDENCIES:
% generally, the input for this function can be generated by fcn_BoundedAStar_makeTimespacePolyhedrafromPolygons
% but this is not a strictly necessary dependency
% see script_test_3d_polytope_multiple or the readme for an example of the typical call order
%
% EXAMPLES:
%
% See the script: script_test_3d_polytope_multiple
% for a full test suite.
%
% This function was written on summer 2023 by Steve Harnett
% Questions or comments? contact sjharnett@psu.edu

%
% REVISION HISTORY:
%
% 2023, summer by Steve Harnett
% -- first write of function
% 2025_07_17 - K. Hayes, kxh1031@psu.edu
% -- copied to new function from fcn_interpolate_polytopes_in_time to
%    follow library convention
% 2025_08_13 - K. Hayes 
% -- updated fcn header and formatting
%
% TO DO:
% TODO @sjharnett when functionalizing this, add the vertex ID column but then remove it

%% Debugging and Input checks
% Check if flag_max_speed set. This occurs if the fig_num variable input
% argument (varargin) is given a number of -1, which is not a valid figure
% number.
MAX_NARGIN = 3; % The largest Number of argument inputs to the function
flag_max_speed = 0;
if (nargin==MAX_NARGIN && isequal(varargin{end},-1))
    flag_do_debug = 0; %     % Flag to plot the results for debugging
    flag_check_inputs = 0; % Flag to perform input checking
    flag_max_speed = 1;
else
    % Check to see if we are externally setting debug mode to be "on"
    flag_do_debug = 0; %     % Flag to plot the results for debugging
    flag_check_inputs = 1; % Flag to perform input checking
    MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS = getenv("MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS");
    MATLABFLAG_MAPGEN_FLAG_DO_DEBUG = getenv("MATLABFLAG_MAPGEN_FLAG_DO_DEBUG");
    if ~isempty(MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS) && ~isempty(MATLABFLAG_MAPGEN_FLAG_DO_DEBUG)
        flag_do_debug = str2double(MATLABFLAG_MAPGEN_FLAG_DO_DEBUG);
        flag_check_inputs  = str2double(MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS);
    end
end

% flag_do_debug = 1;

if flag_do_debug
    st = dbstack; %#ok<*UNRCH>
    fprintf(1,'STARTING function: %s, in file: %s\n',st(1).name,st(1).file);
    debug_fig_num = 999978; %#ok<NASGU>
else
    debug_fig_num = []; %#ok<NASGU>
end

%% check input arguments?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____                   _
%  |_   _|                 | |
%    | |  _ __  _ __  _   _| |_ ___
%    | | | '_ \| '_ \| | | | __/ __|
%   _| |_| | | | |_) | |_| | |_\__ \
%  |_____|_| |_| .__/ \__,_|\__|___/
%              | |
%              |_|
% See: http://patorjk.com/software/taag/#p=display&f=Big&t=Inputs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if 0==flag_max_speed
    if flag_check_inputs
        % Are there the right number of inputs?
        narginchk(2,MAX_NARGIN);

        % Check the time_space_polytopes input, make sure it is struct
        assert(isstruct(time_space_polytopes));

        % Check the dt input, make sure it is numeric
        assert(isnumeric(dt));
        
    end
end

% Does user want to specify all_pts?
% all_pts = []; % Default is to NOT show plots
% if 2 <= nargin
%     temp = varargin{1};
%     if ~isempty(temp) % Did the user NOT give an empty figure number?
%        all_pts = temp;
%     end
% end

% Does user want to show the plots?
flag_do_plots = 0; % Default is to NOT show plots
if (0==flag_max_speed) && (MAX_NARGIN == nargin) 
    temp = varargin{end};
    if ~isempty(temp) % Did the user NOT give an empty figure number?
        fig_num = temp;
        figure(fig_num);
        flag_do_plots = 1;
    end
end


%% Main code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   __  __       _
%  |  \/  |     (_)
%  | \  / | __ _ _ _ __
%  | |\/| |/ _` | | '_ \
%  | |  | | (_| | | | | |
%  |_|  |_|\__,_|_|_| |_|
%
%See: http://patorjk.com/software/taag/#p=display&f=Big&t=Main
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ยง


    dense_verts = [];
    time_space_polytopes_with_dense_verts = time_space_polytopes;
    % loop through each polytope in input struct array
    for i = 1:length(time_space_polytopes)
        verts_this_poly = time_space_polytopes(i).vertices;
        dense_verts_this_poly = INTERNAL_fcn_interpolate_polytope_in_time(verts_this_poly,dt);
        % save interpolated vertices on this polytope
        time_space_polytopes_with_dense_verts(i).dense_vertices = dense_verts_this_poly;
        % save interpolated vertices in all verts array
        dense_verts = [dense_verts; dense_verts_this_poly];
    end
%% Plot the results (for debugging)?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____       _
%  |  __ \     | |
%  | |  | | ___| |__  _   _  __ _
%  | |  | |/ _ \ '_ \| | | |/ _` |
%  | |__| |  __/ |_) | |_| | (_| |
%  |_____/ \___|_.__/ \__,_|\__, |
%                            __/ |
%                           |___/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

if flag_do_plots
    % set up plot
    figure(fig_num);
    hold on;
    view(3)
    box on;
    INTERNAL_fcn_format_timespace_plot();
    all_surfels = fcn_BoundedAStar_makeTriangularSurfelsFromFacets(time_space_polytopes);

    oldverts = [];
    for n = 1:length(time_space_polytopes)
        oldverts = [oldverts; time_space_polytopes(n).vertices];
    end
    

    % Plot polytopes in timespace
    for i = 1:size(all_surfels,1)
        fill3([all_surfels(i,1) all_surfels(i,4) all_surfels(i,7)], [all_surfels(i,2) all_surfels(i,5) all_surfels(i,8)], [all_surfels(i,3) all_surfels(i,6) all_surfels(i,9)],rand(1,3),'FaceAlpha',0.3,'HandleVisibility','off');
    end

    % Plot original vertices
    for j = 1:length(time_space_polytopes)
        plot3(oldverts(:,1), oldverts(:,2), oldverts(:,3),'.','MarkerSize',20,'Color','red');
        plot3(dense_verts(:,1), dense_verts(:,2), dense_verts(:,3), '.', 'MarkerSize', 10, 'Color', 'green');
    end
end 

end % end function

%% Functions follow
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   ______                _   _
%  |  ____|              | | (_)
%  | |__ _   _ _ __   ___| |_ _  ___  _ __  ___
%  |  __| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
%  | |  | |_| | | | | (__| |_| | (_) | | | \__ \
%  |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
%
% See: https://patorjk.com/software/taag/#p=display&f=Big&t=Functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ยง

function dense_verts = INTERNAL_fcn_interpolate_polytope_in_time(verts,dt)

    % for number of unique time values in verts...
    unique_times = unique(verts(:,3));
    num_unique_times = length(unique(verts(:,3)));

    unique_verts = unique(verts(:,4));
    num_unique_verts = length(unique(verts(:,4)));

    % first, linearly interpolated between existing timestamps
    dense_times = [];
    for i = 2:1:num_unique_times
        new_times = unique_times(i-1):dt:unique_times(i);
        dense_times = [dense_times; new_times'];
    end
    dense_times = unique(dense_times); % remove any duplicates
    num_dense_times = length(dense_times);

    % for each vertex, want to interpolate x and y position by the dense times
    for i = 1:1:num_unique_verts
        this_vert_id = unique_verts(i);
        this_vert_rows = find(verts(:,4)==this_vert_id); % find this vertex through all time via its ID
        % extract this vertex's x, y, and t information
        this_vert_x = verts(this_vert_rows,1);
        this_vert_y = verts(this_vert_rows,2);
        this_vert_t = verts(this_vert_rows,3);
        % use MATLABs linear interpolation function to interpolate both x and y position along dense_times
        this_vert_dense_x = interp1(this_vert_t,this_vert_x,dense_times);
        this_vert_dense_y = interp1(this_vert_t,this_vert_y,dense_times);
        this_vert_id_repeated = this_vert_id*ones(num_dense_times,1);
        verts = [verts; this_vert_dense_x this_vert_dense_y dense_times this_vert_id_repeated];
    end
    dense_verts = unique(verts,'rows');
end

function INTERNAL_fcn_format_timespace_plot()
    % define figure properties
    % opts.width      = 8.8;
    % opts.height     = 6;
    % opts.fontType   = 'Times New Roman';
    % opts.fontSize   = 14;
    % fig = gcf;
    % % scaling
    % fig.Units               = 'centimeters';
    % fig.Position(3)         = opts.width;
    % fig.Position(4)         = opts.height;
    
    % % set text properties
    % set(fig.Children, ...
    %     'FontName',     'Times New Roman', ...
    %     'FontSize',     14);
    
    % remove unnecessary white space
    set(gca,'LooseInset',max(get(gca,'TightInset'), 0.02))
    xlabel('x [km]')
    ylabel('y [km]')
    zlabel('t [min]')
    view([36 30])
end
