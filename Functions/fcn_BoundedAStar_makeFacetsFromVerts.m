function time_space_polytopes_with_facets = fcn_BoundedAStar_makeFacetsFromVerts(time_space_polytopes, varargin)
% fcn_BoundedAStar_makeFacetsFromVerts
%
% Takes a timespace or 3D polytope, defined by its vertices, and associates these vertices
% into facets (the 2D faces of the 3D shape) so it is clear how the vertices should be connected by plane segments.
%
%
%
% FORMAT:
%
% time_space_polytopes_with_facets = fcn_BoundedAStar_makeFacetsFromVerts(time_space_polytopes, (fig_num))
%
% INPUTS:
%
%   time_space_polytopes: the 3D (XYT) polytope struct array of the form generated by the function
%   fcn_BoundedAStar_makeTimespacePolyhedrafromPolygons i.e. a struct array with a verts field holding the vertices of each polytope
%   vertices consists of 4 columns: x position, y position, time (z-axis position) and vertex id
%   the vertex ID is necessary for correctly mapping a vertex at one time to its position at the next time
%
%   (optional inputs)
%
%   fig_num: a figure number to plot results. If set to -1, skips any
%   input checking or debugging, no figures will be generated, and sets
%   up code to maximize speed. As well, if given, this forces the
%   variable types to be displayed as output and as well makes the input
%   check process verbose
%
% OUTPUTS:
%
%   time_space_polytopes_with_facets: a struct array with the following fields:
%       vertices: field holding the vertices of each polytope
%           vertices consists of 4 columns: x position, y position, time (z-axis position) and vertex id
%           the vertex ID is necessary for correctly mapping a vertex at one time to its position at the next time
%       flats: field associating vertices into flat facets (i.e. facets that lie flat in a single time plane)
%       sides: field associating vertices into side wall facets (i.e. facets that can span several time values)
%       both the flats and sides fields have the same format: a matrix where each row is a facet and every 4 columns
%         is one vertex consisting of (x, y, t, and ID) as stated above
%         e.g. two flats with three vertices each would be represented as the following 2x12 matrix:
%         flat 1, vert 1 x, flat 1 vert 1 y, flat 1 vert 1 t, flat 1 vert 1 ID, ..., flat 1, vert 3 x, flat 1 vert 3 y, flat 1 vert 3 t, flat 1 vert 3 ID
%         flat 2, vert 1 x, flat 2 vert 1 y, flat 2 vert 1 t, flat 2 vert 1 ID, ..., flat 2, vert 3 x, flat 2 vert 3 y, flat 2 vert 3 t, flat 2 vert 3 ID
%
%
% DEPENDENCIES:
% generally, the input for this function can be generated by fcn_BoundedAStar_makeTimespacePolyhedrafromPolygons
% but this is not a strictly necessary dependency
% see script_test_3d_polytope_multiple or the readme for an example of the typical call order
% there are no dependencies in the source code of this function
%
% EXAMPLES:
%
% See the script: script_test_3d_polytope_multiple
% for a full test suite.
%
% This function was written on summer 2023 by Steve Harnett
% Questions or comments? contact sjharnett@psu.edu

%
% REVISION HISTORY:
%
% 2023, summer by Steve Harnett
% -- first write of function
% 2025_07_17 - K. Hayes, kxh1031@psu.edu
% -- copied to new function from fcn_make_facets_from_verts to follow
% library convention
% 2025_08_14 - K. Hayes
% -- updated fcn header and formatting
%
% TO DO:
%
% -- fill in to-do items here.

%% Debugging and Input checks
% Check if flag_max_speed set. This occurs if the fig_num variable input
% argument (varargin) is given a number of -1, which is not a valid figure
% number.
MAX_NARGIN = 2; % The largest Number of argument inputs to the function
flag_max_speed = 0;
if (nargin==MAX_NARGIN && isequal(varargin{end},-1))
    flag_do_debug = 0; %     % Flag to plot the results for debugging
    flag_check_inputs = 0; % Flag to perform input checking
    flag_max_speed = 1;
else
    % Check to see if we are externally setting debug mode to be "on"
    flag_do_debug = 0; %     % Flag to plot the results for debugging
    flag_check_inputs = 1; % Flag to perform input checking
    MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS = getenv("MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS");
    MATLABFLAG_MAPGEN_FLAG_DO_DEBUG = getenv("MATLABFLAG_MAPGEN_FLAG_DO_DEBUG");
    if ~isempty(MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS) && ~isempty(MATLABFLAG_MAPGEN_FLAG_DO_DEBUG)
        flag_do_debug = str2double(MATLABFLAG_MAPGEN_FLAG_DO_DEBUG);
        flag_check_inputs  = str2double(MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS);
    end
end

% flag_do_debug = 1;

if flag_do_debug
    st = dbstack; %#ok<*UNRCH>
    fprintf(1,'STARTING function: %s, in file: %s\n',st(1).name,st(1).file);
    debug_fig_num = 999978; %#ok<NASGU>
else
    debug_fig_num = []; %#ok<NASGU>
end

%% check input arguments?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____                   _
%  |_   _|                 | |
%    | |  _ __  _ __  _   _| |_ ___
%    | | | '_ \| '_ \| | | | __/ __|
%   _| |_| | | | |_) | |_| | |_\__ \
%  |_____|_| |_| .__/ \__,_|\__|___/
%              | |
%              |_|
% See: http://patorjk.com/software/taag/#p=display&f=Big&t=Inputs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if 0==flag_max_speed
    if flag_check_inputs
        % Are there the right number of inputs?
        narginchk(1,MAX_NARGIN);

        % Check the time_space_polytopes input, make sure it is struct
        assert(isstruct(time_space_polytopes));
    end
end

% Does user want to specify all_pts?
% all_pts = []; % Default is to NOT show plots
% if 2 <= nargin
%     temp = varargin{1};
%     if ~isempty(temp) % Did the user NOT give an empty figure number?
%        all_pts = temp;
%     end
% end

% Does user want to show the plots?
flag_do_plots = 0; % Default is to NOT show plots
if (0==flag_max_speed) && (MAX_NARGIN == nargin) 
    temp = varargin{end};
    if ~isempty(temp) % Did the user NOT give an empty figure number?
        fig_num = temp;
        figure(fig_num);
        flag_do_plots = 1;
    end
end


%% Main code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   __  __       _
%  |  \/  |     (_)
%  | \  / | __ _ _ _ __
%  | |\/| |/ _` | | '_ \
%  | |  | | (_| | | | | |
%  |_|  |_|\__,_|_|_| |_|
%
%See: http://patorjk.com/software/taag/#p=display&f=Big&t=Main
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ยง

% loop through all polytopes
for i = 1:length(time_space_polytopes)
    verts = time_space_polytopes(i).vertices; % pull out vertices
    unique_times = unique(verts(:,3)); % the number of unique t values in the vertices...
    num_unique_times = length(unique_times); % is the number of time stamps for which there is data
    
    unique_verts = unique(verts(:,4)); % the number of unique ID values in column 4 of the vertices...
    num_unique_verts = length(unique_verts); % is the number of unique vertices
    
    % both flats and sides are the number of facets X (number of pts*4)
    % this is because each point is 4-dimensional (x,y,t,id)
    % initialize flats as num times (one flat per time) X num verts*4
    % (each vertex is required to define a flat polygon)
    flats = nan(num_unique_times,num_unique_verts*4);
    
    % there is a side for ever pair of verts and every pair of times
    % this is because a pair of vertices at one time, representing a line segment side on the 2D polytope,
    % will move to a new time, thus the line segment at the next time forms a parallelogram in time space
    % these always have 4 points so the sides is initialized as
    % (num verts * num times - 1) X 4*4
    % (for four 4-dimensional points (x,y,t,id))
    sides = nan(num_unique_verts*(num_unique_times-1), 4*4);
    sides_recorded = 1; % initialize counter of number of sides recorded
    
    % put 2D polytope at first time into flats array
    this_time_rows = find(verts(:,3) == unique_times(1)); % find vertices with the first unique timestamp
    flats(1,:) = reshape(verts(this_time_rows,:).',1,[]); % put all vertices onto one row
    
    % loop through remaining time stamps
    for j = 2:num_unique_times
        % put this time into flats array
        prev_time = unique_times(j-1);
        this_time = unique_times(j);
        this_time_rows = find(verts(:,3) == this_time); % find vertices at current time
        prev_time_rows = find(verts(:,3) == prev_time); % find vertices at previous time
        % make another flat from vertices at the current time
        flats(j,:) = reshape(verts(this_time_rows,:).',1,[]); % put all vertices onto one row
    
        % loop through all unique vertices
        for k = 1:num_unique_verts
        % for each vertex, take this vert to the next...
            this_vert = unique_verts(k);
            if k == num_unique_verts
                next_vert = unique_verts(1); % next vert is the first vert if we're looking at the last vert (circular array)
            else
                next_vert = unique_verts(k+1); % otherwise next vert is the kth + 1 vert
            end
            this_vert_rows = find(verts(:,4) == this_vert); % find vertices with the same vertex ID (representing the same vertex at other times)
            next_vert_rows = find(verts(:,4) == next_vert);
            % ...at this time to the previous
            % forming the parallelogram of this side of the 2D polytope at the previous time to the next time
            side_wall_idx = [(intersect(this_vert_rows, prev_time_rows)),...
                             (intersect(next_vert_rows, prev_time_rows)),...
                             (intersect(next_vert_rows, this_time_rows)),...
                             (intersect(this_vert_rows, this_time_rows))];
    
            % and put that in the array of sidewalls
            sides(sides_recorded,:) = reshape(verts(side_wall_idx,:).',1,[]);
            sides_recorded = sides_recorded + 1; % increment side counter after recording a side
        end
    end
    time_space_polytopes(i).flats = flats; % update this polytope with flats matrix
    time_space_polytopes(i).sides = sides; % update this polytope with sides matrix
end
time_space_polytopes_with_facets = time_space_polytopes; % rename for output

%% Plot the results (for debugging)?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____       _
%  |  __ \     | |
%  | |  | | ___| |__  _   _  __ _
%  | |  | |/ _ \ '_ \| | | |/ _` |
%  | |__| |  __/ |_) | |_| | (_| |
%  |_____/ \___|_.__/ \__,_|\__, |
%                            __/ |
%                           |___/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

if flag_do_plots
    % set up plot
    figure(fig_num);
    hold on;
    view(3)
    box on;
    INTERNAL_fcn_format_timespace_plot();
    
    % Make surfels for plotting
    all_surfels = fcn_BoundedAStar_makeTriangularSurfelsFromFacets(time_space_polytopes);
        
    % Plot polytopes
    for i = 1:size(all_surfels,1)
        fill3([all_surfels(i,1) all_surfels(i,4) all_surfels(i,7)], [all_surfels(i,2) all_surfels(i,5) all_surfels(i,8)], [all_surfels(i,3) all_surfels(i,6) all_surfels(i,9)],rand(1,3),'FaceAlpha',0.3);
    end
end 

end % end function

%% Functions follow
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   ______                _   _
%  |  ____|              | | (_)
%  | |__ _   _ _ __   ___| |_ _  ___  _ __  ___
%  |  __| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
%  | |  | |_| | | | | (__| |_| | (_) | | | \__ \
%  |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
%
% See: https://patorjk.com/software/taag/#p=display&f=Big&t=Functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ยง
function INTERNAL_fcn_format_timespace_plot()
    % define figure properties
    % opts.width      = 8.8;
    % opts.height     = 6;
    % opts.fontType   = 'Times New Roman';
    % opts.fontSize   = 14;
    % fig = gcf;
    % % scaling
    % fig.Units               = 'centimeters';
    % fig.Position(3)         = opts.width;
    % fig.Position(4)         = opts.height;
    
    % % set text properties
    % set(fig.Children, ...
    %     'FontName',     'Times New Roman', ...
    %     'FontSize',     14);
    
    % remove unnecessary white space
    set(gca,'LooseInset',max(get(gca,'TightInset'), 0.02))
    xlabel('x [km]')
    ylabel('y [km]')
    zlabel('t [min]')
    view([36 30])
end