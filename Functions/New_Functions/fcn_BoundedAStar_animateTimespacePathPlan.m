function fcn_BoundedAStar_animateTimespacePathPlan(start, finish, time_space_polytopes, route_dense, dt, xlims, ylims)
% fcn_BoundedAStar_animateTimespacePathPlan
%
% Uses the gif library to plot the vehicle position, route progress, and polytope positions
% at each time step, then creating a gif frame from this plot, and saving all plotted frames
% as a gif for animating timespace (XYZ) routes and obstalces as a series of 2D (XY) plots.
%
%
% FORMAT:
%
% fcn_BoundedAStar_animateTimespacePathPlan(start, finish, time_space_polytopes, route_dense, dt, xlims, ylims)
%
% INPUTS:
%
%     start: the start point vector (x,y,t)
%
%     finish: the finish point vector (x,y,t)
%
%     time_space_polytopes: the 3D (XYT) polytope struct array of the form generated by the function
%         fcn_BoundedAStar_makeTimespacePolyhedrafromPolygons i.e. a struct array with a verts field holding the vertices of each polytope
%         vertices consists of 4 columns: x position, y position, time (z-axis position) and vertex id
%         the vertex ID is necessary for correctly mapping a vertex at one time to its position at the next time
%
%     route_dense: the matrix representing the interpolated route consisting of waypoints.  Each row is a
%     waypoint, and each column is x, y, t, and point ID
%
%     dt: the desired time step for interpolating the route waypoints
%
%     xlims: the xlimits for plotting as a 1x2 vector consisting of the lower and upper limits
%
%     ylims: the ylimits for plotting as a 1x2 vector consisting of the lower and upper limits
%
%
% OUTPUTS:
%
%       none, but it will save a gif locally
%
% DEPENDENCIES:
%    the gif library which can be found on the MATLAB file exchange here: https://www.mathworks.com/matlabcentral/fileexchange/63239-gif
%
%
% EXAMPLES:
%
% See the script: script_test_3d* files for examples of function calls
% Example outputs are shown in the README for this repo
%
% This function was written on summer 2023 by Steve Harnett
% Questions or comments? contact sjharnett@psu.edu

%
% REVISION HISTORY:
%
% 2023, summer by Steve Harnett
% -- first write of function
% 2025_07_17 - K. Hayes, kxh1031@psu.edu
% -- copied to new function from fcn_animate_timespace_path_plan.m to
%    follow library conventions
%
% TO DO:

    close all; % close all figures so they aren't included as a gif frame
    dense_times = route_dense(:,3); % extract time column from route
    num_dense_times = length(dense_times); % deduplicate

    % loop through all time steps
    for i = 1:num_dense_times
        hold on; box on; title(sprintf('Animation of timespace path planning\n %.2f min per frame', dt))
        % define figure properties
        pose = [1000 458 560 420]
        opts.fontType   = 'Helvetica';
        opts.fontSize   = 10;
        fig = gcf;
        % scaling
        fig.Units               = 'pixels';
        fig.Position         = pose;
        set(gcf,'color','white')
        % set text properties
        set(fig.Children, ...
            'FontName',     'Helvetica', ...
            'FontSize',     10);

        % remove unnecessary white space
        set(gca,'LooseInset',max(get(gca,'TightInset'), 0.02))
        xlabel('x [km]')
        ylabel('y [km]')
        ylim(ylims)
        xlim(xlims)
        % for each polytope,
        % create a fill from this poly's verts
        cur_time = dense_times(i);
        for j = 1:length(time_space_polytopes)
            verts = time_space_polytopes(j).dense_vertices;
            cur_time_locations = find(verts(:,3) == cur_time); % only care about x and y coords at this time
            cur_x = verts(cur_time_locations,1);
            cur_y = verts(cur_time_locations,2);
            P = [cur_x, cur_y];
            k = convhull(P);
            fill(P(k,1),P(k,2),'b','FaceAlpha',0.2);
            % fill(cur_x,cur_y,'b','FaceAlpha',0.2);
        end

        cur_route_idx = find(route_dense(:,3) == cur_time); % find route waypoint based on current time

        % want to plot route history
        p_route = plot(route_dense(1:cur_route_idx,1),route_dense(1:cur_route_idx,2),'-k','LineWidth',2);
        % also want to plot current position
        p_pose = plot(route_dense(cur_route_idx,1),route_dense(cur_route_idx,2),'xk');
        % plot finish position at current time, if it exists
        cur_time_locations_in_finish = find(finish(:,3) == cur_time);
        p_start = plot(start(:,1),start(:,2),'gx'); % plot start regardless of time
        p_finish = plot(finish(cur_time_locations_in_finish ,1),finish(cur_time_locations_in_finish,2),'rx');
        p_finish_traj = plot(finish(:,1),finish(:,2),'--r'); % plot past and future trajectory of finish if it moves
        % first call of the gif function is different from subsequent calls
        if i == 1
            % gif('timespace_animation.gif','LoopCount',1,'DelayTime',dt/10) % notice frame duration is dt/10 to speed up animations for convenient viewing
            gif('timespace_animation.gif','DelayTime',dt/10) % notice frame duration is dt/10 to speed up animations for convenient viewing
        else
            gif
        end
        % delete graphics objects before beginning to plot the next frame
        delete(gca)
        delete(p_route)
        delete(p_pose)
        delete(p_start)
        delete(p_finish)
        delete(p_finish_traj)
    end
end
