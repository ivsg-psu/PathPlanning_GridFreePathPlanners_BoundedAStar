function fcn_BoundedAStar_animateTimespacePathPlan(start, finish, time_space_polytopes, route_dense, dt, xlims, ylims, varargin)
% fcn_BoundedAStar_animateTimespacePathPlan
%
% Uses the gif library to plot the vehicle position, route progress, and polytope positions
% at each time step, then creating a gif frame from this plot, and saving all plotted frames
% as a gif for animating timespace (XYZ) routes and obstalces as a series of 2D (XY) plots.
%
%
% FORMAT:
%
% fcn_BoundedAStar_animateTimespacePathPlan(start, finish, time_space_polytopes, route_dense, dt, xlims, ylims)
%
% INPUTS:
%
%     start: the start point vector (x,y,t)
%
%     finish: the finish point vector (x,y,t)
%
%     time_space_polytopes: the 3D (XYT) polytope struct array of the form generated by the function
%         fcn_BoundedAStar_makeTimespacePolyhedrafromPolygons i.e. a struct array with a verts field holding the vertices of each polytope
%         vertices consists of 4 columns: x position, y position, time (z-axis position) and vertex id
%         the vertex ID is necessary for correctly mapping a vertex at one time to its position at the next time
%
%     route_dense: the matrix representing the interpolated route consisting of waypoints.  Each row is a
%     waypoint, and each column is x, y, t, and point ID
%
%     dt: the desired time step for interpolating the route waypoints
%
%     xlims: the xlimits for plotting as a 1x2 vector consisting of the lower and upper limits
%
%     ylims: the ylimits for plotting as a 1x2 vector consisting of the lower and upper limits
%
%
% OUTPUTS:
%
%       none, but it will save a gif locally
%
% DEPENDENCIES:
%
%    the gif library which can be found on the MATLAB file exchange here: https://www.mathworks.com/matlabcentral/fileexchange/63239-gif
%
%    fcn_DebugTools_checkInputsToFunctions
%
%
% EXAMPLES:
%
% See the script: script_test_3d* files for examples of function calls. See
% script_test_fcn_BoundedAStar_animateTimespacePathPlan for more use cases.
% Example outputs are shown in the README for this repo
%
% This function was written on summer 2023 by Steve Harnett
% Questions or comments? contact sjharnett@psu.edu

%
% REVISION HISTORY:
%
% 2023, summer by Steve Harnett
% -- first write of function
% 2025_07_17 - K. Hayes, kxh1031@psu.edu
% -- copied to new function from fcn_animate_timespace_path_plan.m to
%    follow library conventions
% 2025_08_25 - K. Hayes
% -- updated fcn header and formatting
%
% TO DO:

%% Debugging and Input checks
% Check if flag_max_speed set. This occurs if the fig_num variable input
% argument (varargin) is given a number of -1, which is not a valid figure
% number.
MAX_NARGIN = 8; % The largest Number of argument inputs to the function
flag_max_speed = 0;
if (nargin==MAX_NARGIN && isequal(varargin{end},-1))
    flag_do_debug = 0; %     % Flag to plot the results for debugging
    flag_check_inputs = 0; % Flag to perform input checking
    flag_max_speed = 1;
else
    % Check to see if we are externally setting debug mode to be "on"
    flag_do_debug = 0; %     % Flag to plot the results for debugging
    flag_check_inputs = 1; % Flag to perform input checking
    MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS = getenv("MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS");
    MATLABFLAG_MAPGEN_FLAG_DO_DEBUG = getenv("MATLABFLAG_MAPGEN_FLAG_DO_DEBUG");
    if ~isempty(MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS) && ~isempty(MATLABFLAG_MAPGEN_FLAG_DO_DEBUG)
        flag_do_debug = str2double(MATLABFLAG_MAPGEN_FLAG_DO_DEBUG);
        flag_check_inputs  = str2double(MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS);
    end
end

% flag_do_debug = 1;

if flag_do_debug
    st = dbstack; %#ok<*UNRCH>
    fprintf(1,'STARTING function: %s, in file: %s\n',st(1).name,st(1).file);
    debug_fig_num = 999978; %#ok<NASGU>
else
    debug_fig_num = []; %#ok<NASGU>
end

%% check input arguments?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____                   _
%  |_   _|                 | |
%    | |  _ __  _ __  _   _| |_ ___
%    | | | '_ \| '_ \| | | | __/ __|
%   _| |_| | | | |_) | |_| | |_\__ \
%  |_____|_| |_| .__/ \__,_|\__|___/
%              | |
%              |_|
% See: http://patorjk.com/software/taag/#p=display&f=Big&t=Inputs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if 0==flag_max_speed
    if flag_check_inputs
        % Are there the right number of inputs?
        narginchk(7,MAX_NARGIN);

        % % Check the all_points input, make sure it has 5 columns
        % fcn_DebugTools_checkInputsToFunctions(...
        %     all_pts, '5column_of_numbers');
        % 
        % % Check the start input, make sure it has 5 columns
        % fcn_DebugTools_checkInputsToFunctions(...
        %     start, '5column_of_numbers');
        % 
        % % Check the finish input, make sure it has 5 columns
        % fcn_DebugTools_checkInputsToFunctions(...
        %     finish, '5column_of_numbers');

    end
end

% Does user want to show the plots?
flag_do_plots = 0; % Default is to NOT show plots
if (0==flag_max_speed) && (MAX_NARGIN == nargin) 
    temp = varargin{end};
    if ~isempty(temp) % Did the user NOT give an empty figure number?
        fig_num = temp;
        figure(fig_num);
        flag_do_plots = 1;
    end
end

%% Main code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   __  __       _
%  |  \/  |     (_)
%  | \  / | __ _ _ _ __
%  | |\/| |/ _` | | '_ \
%  | |  | | (_| | | | | |
%  |_|  |_|\__,_|_|_| |_|
%
%See: http://patorjk.com/software/taag/#p=display&f=Big&t=Main
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ยง

    close all; % close all figures so they aren't included as a gif frame
    dense_times = route_dense(:,3); % extract time column from route
    num_dense_times = length(dense_times); % deduplicate

    % loop through all time steps
    for i = 1:num_dense_times
        hold on; box on; title(sprintf('Animation of timespace path planning\n %.2f min per frame', dt))
        % define figure properties
        pose = [1000 458 560 420]
        opts.fontType   = 'Helvetica';
        opts.fontSize   = 10;
        fig = gcf;
        % scaling
        fig.Units               = 'pixels';
        fig.Position         = pose;
        set(gcf,'color','white')
        % set text properties
        set(fig.Children, ...
            'FontName',     'Helvetica', ...
            'FontSize',     10);

        % remove unnecessary white space
        set(gca,'LooseInset',max(get(gca,'TightInset'), 0.02))
        xlabel('x [km]')
        ylabel('y [km]')
        ylim(ylims)
        xlim(xlims)
        % for each polytope,
        % create a fill from this poly's verts
        cur_time = dense_times(i);
        for j = 1:length(time_space_polytopes)
            verts = time_space_polytopes(j).dense_vertices;
            cur_time_locations = find(verts(:,3) == cur_time); % only care about x and y coords at this time
            cur_x = verts(cur_time_locations,1);
            cur_y = verts(cur_time_locations,2);
            P = [cur_x, cur_y];
            k = convhull(P);
            fill(P(k,1),P(k,2),'b','FaceAlpha',0.2);
            % fill(cur_x,cur_y,'b','FaceAlpha',0.2);
        end

        cur_route_idx = find(route_dense(:,3) == cur_time); % find route waypoint based on current time

        % want to plot route history
        p_route = plot(route_dense(1:cur_route_idx,1),route_dense(1:cur_route_idx,2),'-k','LineWidth',2);
        % also want to plot current position
        p_pose = plot(route_dense(cur_route_idx,1),route_dense(cur_route_idx,2),'xk');
        % plot finish position at current time, if it exists
        cur_time_locations_in_finish = find(finish(:,3) == cur_time);
        p_start = plot(start(:,1),start(:,2),'gx'); % plot start regardless of time
        p_finish = plot(finish(cur_time_locations_in_finish ,1),finish(cur_time_locations_in_finish,2),'rx');
        p_finish_traj = plot(finish(:,1),finish(:,2),'--r'); % plot past and future trajectory of finish if it moves
        % first call of the gif function is different from subsequent calls
        if i == 1
            % gif('timespace_animation.gif','LoopCount',1,'DelayTime',dt/10) % notice frame duration is dt/10 to speed up animations for convenient viewing
            gif('timespace_animation.gif','DelayTime',dt/10) % notice frame duration is dt/10 to speed up animations for convenient viewing
        else
            gif
        end
        % delete graphics objects before beginning to plot the next frame
        delete(gca)
        delete(p_route)
        delete(p_pose)
        delete(p_start)
        delete(p_finish)
        delete(p_finish_traj)
    end
%% Plot the results (for debugging)?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____       _
%  |  __ \     | |
%  | |  | | ___| |__  _   _  __ _
%  | |  | |/ _ \ '_ \| | | |/ _` |
%  | |__| |  __/ |_) | |_| | (_| |
%  |_____/ \___|_.__/ \__,_|\__, |
%                            __/ |
%                           |___/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  

if flag_do_plots
  
end % Ends the flag_do_plot if statement

end % end function
%% Functions follow
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   ______                _   _
%  |  ____|              | | (_)
%  | |__ _   _ _ __   ___| |_ _  ___  _ __  ___
%  |  __| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
%  | |  | |_| | | | | (__| |_| | (_) | | | \__ \
%  |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
%
% See: https://patorjk.com/software/taag/#p=display&f=Big&t=Functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ยง