function route_dense = fcn_BoundedAStar_interpolateRouteSpatially(route, spacing, varargin)
% fcn_BoundedAStar_interpolateRouteSpatially
%
% Adds waypoints to the input route to increase the density of points according to the number of
% desired points. This is useful for threadpulling (replanning from waypoints along an initial route).
%
%
% FORMAT:
%
% route_dense = fcn_BoundedAStar_interpolateRouteSpatially(route,num_pts,(fig_num))
%
% INPUTS:
%
%     route: the matrix as produced by fcn_BoundedAStar_AStar consisting of waypoints.  Each row is a
%     waypoint, and each column is x, y, and point ID
%
%     spacing: the desired spacing between points to achieve by adding waypoints
%       when creating the dense route by interpolating the route waypoints
%
%     (optional inputs)
%
%     fig_num: a figure number to plot results. If set to -1, skips any
%       input checking or debugging, no figures will be generated, and sets
%       up code to maximize speed. As well, if given, this forces the
%       variable types to be displayed as output and as well makes the input
%       check process verbose
%
% OUTPUTS:
%     route_dense: the matrix representing the interpolated route consisting of waypoints.  Each row is a
%     waypoint, and each column is x, y, and point ID
%
% DEPENDENCIES:
% generally, the input for this function can be generated by
% fcn_BoundedAStar_AStar or fcn_BoundedAStar_AStarBounded
% but this is not a strictly necessary dependency
%
% EXAMPLES:
%
% See the script: script_test_fcn_interpolate_route_spatially
% for a full test suite.
%
% This function was written in Janyuary 2024 by Steve Harnett
% Questions or comments? contact sjharnett@psu.edu

%
% REVISION HISTORY:
%
% 2024, January by Steve Harnett
% -- first write of function
% 2025_07_17 - K. Hayes, kxh1031@psu.edu
% -- copied to new function from fcn_interpolate_route_spatially to follow
%    library convention
% 2025_08_11 - K. Hayes
% -- updated function header and formatting
%
% TO DO:

%% Debugging and Input checks
% Check if flag_max_speed set. This occurs if the fig_num variable input
% argument (varargin) is given a number of -1, which is not a valid figure
% number.
MAX_NARGIN = 3; % The largest Number of argument inputs to the function
flag_max_speed = 0;
if (nargin==MAX_NARGIN && isequal(varargin{end},-1))
    flag_do_debug = 0; %     % Flag to plot the results for debugging
    flag_check_inputs = 0; % Flag to perform input checking
    flag_max_speed = 1;
else
    % Check to see if we are externally setting debug mode to be "on"
    flag_do_debug = 0; %     % Flag to plot the results for debugging
    flag_check_inputs = 1; % Flag to perform input checking
    MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS = getenv("MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS");
    MATLABFLAG_MAPGEN_FLAG_DO_DEBUG = getenv("MATLABFLAG_MAPGEN_FLAG_DO_DEBUG");
    if ~isempty(MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS) && ~isempty(MATLABFLAG_MAPGEN_FLAG_DO_DEBUG)
        flag_do_debug = str2double(MATLABFLAG_MAPGEN_FLAG_DO_DEBUG);
        flag_check_inputs  = str2double(MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS);
    end
end

% flag_do_debug = 1;

if flag_do_debug
    st = dbstack; %#ok<*UNRCH>
    fprintf(1,'STARTING function: %s, in file: %s\n',st(1).name,st(1).file);
    debug_fig_num = 999978; %#ok<NASGU>
else
    debug_fig_num = []; %#ok<NASGU>
end

%% check input arguments?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____                   _
%  |_   _|                 | |
%    | |  _ __  _ __  _   _| |_ ___
%    | | | '_ \| '_ \| | | | __/ __|
%   _| |_| | | | |_) | |_| | |_\__ \
%  |_____|_| |_| .__/ \__,_|\__|___/
%              | |
%              |_|
% See: http://patorjk.com/software/taag/#p=display&f=Big&t=Inputs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if 0==flag_max_speed
    if flag_check_inputs
        % Are there the right number of inputs?
        narginchk(2,MAX_NARGIN);

        % Check the route input, make sure it has 5 columns
        fcn_DebugTools_checkInputsToFunctions(...
            route, '2column_of_numbers');

        % Check the spacing input, make sure it is numeric
        assert(isnumeric(spacing)); 

    end
end

% Does user want to show the plots?
flag_do_plots = 0; % Default is to NOT show plots
if (0==flag_max_speed) && (MAX_NARGIN == nargin) 
    temp = varargin{end};
    if ~isempty(temp) % Did the user NOT give an empty figure number?
        fig_num = temp;
        figure(fig_num);
        flag_do_plots = 1;
    end
end


%% Main code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   __  __       _
%  |  \/  |     (_)
%  | \  / | __ _ _ _ __
%  | |\/| |/ _` | | '_ \
%  | |  | | (_| | | | | |
%  |_|  |_|\__,_|_|_| |_|
%
%See: http://patorjk.com/software/taag/#p=display&f=Big&t=Main
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ยง


    %% interpolation code for a route
    num_route_verts = size(route,1);
    route_dense = [];

    % loop through each pair of waypoints
    for i = 1:(num_route_verts-1)
        % get pair of adjascent waypoints and distance between them
        p1 = route(i,:);
        p2 = route(i+1,:);
        dist21 = sqrt((p2(2)-p1(2))^2+(p2(1)-p1(1))^2);
        needed_points = dist21/spacing;

        % if the x's aren't the same, interpolate normally BASED ON DISTANCE
        if p1(1) ~= p2(1)
            route_dense_x = linspace(p1(1),p2(1),needed_points);
            route_dense_y = interp1(route(i:(i+1),1),route(i:(i+1),2),route_dense_x);

        % if the x's are the same, interpolate in y instead
        elseif p1(1) == p2(1)
            route_dense_y = linspace(p1(2),p2(2),needed_points);
            route_dense_x = interp1(route(i:(i+1),2),route(i:(i+1),1),route_dense_y);

        % this condition should not be hit
        else
            error('Waypoints may be malformed')
        end
        % For a similar conditional block, see fcn_MapGen_increasePolytopeVertexCount

        % assemble new waypoints into dense route
        route_dense = [route_dense; route_dense_x', route_dense_y'];
    end
    % remove any duplicated points whilst preserving route order
    route_dense = unique(route_dense,'stable','rows');
%% Plot the results (for debugging)?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____       _
%  |  __ \     | |
%  | |  | | ___| |__  _   _  __ _
%  | |  | |/ _ \ '_ \| | | |/ _` |
%  | |__| |  __/ |_) | |_| | (_| |
%  |_____/ \___|_.__/ \__,_|\__, |
%                            __/ |
%                           |___/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

if flag_do_plots
    % Plot setup
    figure(fig_num)
    hold on
    box on
    xlabel('x [km]')
    ylabel('y [km]')
    % Plot various pieces of route
    plot(route(1,1),route(1,2),'xg','MarkerSize',3, 'DisplayName', 'Start');
    plot(route(end,1),route(end,2),'xr','MarkerSize',3, 'DisplayName', 'Finish');
    plot(route(:,1),route(:,2),'-ok', 'LineWidth', 3, 'MarkerSize',3, 'DisplayName',  'Waypoints');
    plot(route_dense(:,1),route_dense(:,2),'--dm', 'LineWidth', 2,'MarkerSize',2,'DisplayName','Interpolated Route');
    legend('Location','best')
end

        
end
%% Functions follow
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   ______                _   _
%  |  ____|              | | (_)
%  | |__ _   _ _ __   ___| |_ _  ___  _ __  ___
%  |  __| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
%  | |  | |_| | | | | (__| |_| | (_) | | | \__ \
%  |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
%
% See: https://patorjk.com/software/taag/#p=display&f=Big&t=Functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ยง
