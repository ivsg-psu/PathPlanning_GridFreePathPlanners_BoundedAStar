function time_space_polytopes = fcn_BoundedAStar_makeTimespacePolyhedrafromPolygons(shrunk_polytopes, max_translation_distance, final_time, varargin)
% fcn_BoundedAStar_makeTimespacePolyhedrafromPolygons
%
% Takes an array of polytopes as an input and gives them random,
% bounded velocities, thus forming dynamic polytopes in timespace.
%
%
% FORMAT:
%
% time_space_polytopes =
% fcn_BoundedAStar_makeTimespacePolyhedrafromPolygons(
%   shrunk_polytopes, max_translation_distance, final_time)
%
% INPUTS:
%
%   shrunk_polytopes: the 2D polytope struct array of the form generated by the MapGen repo, typically
%   generated with the functions fcn_MapGen_haltonVoronoiTiling and fcn_MapGen_polytopesShrink*
%   see MapGen repo for examples of how to generate polytope maps with these functions
%
%   max_translation_distance: the maximum distance any polytope will be allowed to translate from
%   time = 0 to the final time.  If this is set at half the gap size, no polytope collisions will occur
%
%   final_time: the end time of the timespace polytopes.  This is the maximum t-axis (z-axis) value
%
%   (optional inputs)
%
%   fig_num: a figure number to plot results. If set to -1, skips any
%   input checking or debugging, no figures will be generated, and sets
%   up code to maximize speed. As well, if given, this forces the
%   variable types to be displayed as output and as well makes the input
%   check process verbose
%
%
% OUTPUTS:
%
%     time_space_polytopes: a struct array with a vertices field holding the vertices of each polytope
%     vertices consists of 4 columns: x position, y position, time (z-axis position) and vertex id
%     the vertex ID is necessary for correctly mapping a vertex at one time to its position at the next time
%
% DEPENDENCIES:
%
% the repo PathPlanning_MapTools_MapGenClassLibrary is used for creating the inputs to this function
% but there are no dependencies in the source code of this function
%
% EXAMPLES:
%
% See the script: script_test_3d_polytope_multiple
% for a full test suite.
%
% This function was written on summer 2023 by Steve Harnett
% Questions or comments? contact sjharnett@psu.edu

%
% REVISION HISTORY:
%
% 2023, summer by Steve Harnett
% -- first write of function
% 2025_07_17 - K. Hayes, kxh1031@psu.edu
% -- copied to new function from fcn_make_timespace_polyhedra_from_polygons
%    to follow library convention
% 2025_08_15 - K. Hayes
% -- updated fcn header and formatting
%
% TO DO:
%
% -- fill in to-do items here.

%% Debugging and Input checks
% Check if flag_max_speed set. This occurs if the fig_num variable input
% argument (varargin) is given a number of -1, which is not a valid figure
% number.
MAX_NARGIN = 4; % The largest Number of argument inputs to the function
flag_max_speed = 0;
if (nargin==MAX_NARGIN && isequal(varargin{end},-1))
    flag_do_debug = 0; %     % Flag to plot the results for debugging
    flag_check_inputs = 0; % Flag to perform input checking
    flag_max_speed = 1;
else
    % Check to see if we are externally setting debug mode to be "on"
    flag_do_debug = 0; %     % Flag to plot the results for debugging
    flag_check_inputs = 1; % Flag to perform input checking
    MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS = getenv("MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS");
    MATLABFLAG_MAPGEN_FLAG_DO_DEBUG = getenv("MATLABFLAG_MAPGEN_FLAG_DO_DEBUG");
    if ~isempty(MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS) && ~isempty(MATLABFLAG_MAPGEN_FLAG_DO_DEBUG)
        flag_do_debug = str2double(MATLABFLAG_MAPGEN_FLAG_DO_DEBUG);
        flag_check_inputs  = str2double(MATLABFLAG_MAPGEN_FLAG_CHECK_INPUTS);
    end
end

% flag_do_debug = 1;

if flag_do_debug
    st = dbstack; %#ok<*UNRCH>
    fprintf(1,'STARTING function: %s, in file: %s\n',st(1).name,st(1).file);
    debug_fig_num = 999978; %#ok<NASGU>
else
    debug_fig_num = []; %#ok<NASGU>
end

%% check input arguments?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____                   _
%  |_   _|                 | |
%    | |  _ __  _ __  _   _| |_ ___
%    | | | '_ \| '_ \| | | | __/ __|
%   _| |_| | | | |_) | |_| | |_\__ \
%  |_____|_| |_| .__/ \__,_|\__|___/
%              | |
%              |_|
% See: http://patorjk.com/software/taag/#p=display&f=Big&t=Inputs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if 0==flag_max_speed
    if flag_check_inputs
        % Are there the right number of inputs?
        narginchk(3,MAX_NARGIN);

        % Check the shrunk_polytopes input, make sure it is struct
        assert(isstruct(shrunk_polytopes));

        % Check the max_translation_distance input, make sure it is numeric
        assert(isnumeric(max_translation_distance));

        % Check the final_time input, make sure it is numeric
        assert(isnumeric(final_time));
        
    end
end

% Does user want to specify all_pts?
% all_pts = []; % Default is to NOT show plots
% if 2 <= nargin
%     temp = varargin{1};
%     if ~isempty(temp) % Did the user NOT give an empty figure number?
%        all_pts = temp;
%     end
% end

% Does user want to show the plots?
flag_do_plots = 0; % Default is to NOT show plots
if (0==flag_max_speed) && (MAX_NARGIN == nargin) 
    temp = varargin{end};
    if ~isempty(temp) % Did the user NOT give an empty figure number?
        fig_num = temp;
        figure(fig_num);
        flag_do_plots = 1;
    end
end


%% Main code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   __  __       _
%  |  \/  |     (_)
%  | \  / | __ _ _ _ __
%  | |\/| |/ _` | | '_ \
%  | |  | | (_| | | | | |
%  |_|  |_|\__,_|_|_| |_|
%
%See: http://patorjk.com/software/taag/#p=display&f=Big&t=Main
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ยง

    % loop through each 2D polytope
    for i = 1:length(shrunk_polytopes)
        % we want to give a random translation distance for the vertices so they are at their original
        % position, plus some random value less than max_translation_distance, by final_time

        % rand gives a value between 0 and 1 thus rand-0.5 gives a value between -0.5 and 0.5 thus 2*(rand-0.5)
        % gives a value between -1 and 1 thus we randomize magnitude and direction of the max_translation_distance
        vel_this_poly = 2*[(rand-0.5)*max_translation_distance (rand-0.5)*max_translation_distance];
        num_verts = length(shrunk_polytopes(i).xv); % get total number of verts
        vert_ids = (1:1:num_verts)'; % assign ID to each vert so it can be identified as itself at each time
        verts = [shrunk_polytopes(i).xv' shrunk_polytopes(i).yv' 0*ones(num_verts,1) vert_ids; % place each vert at its original position at time 0
                 shrunk_polytopes(i).xv'+vel_this_poly(1) shrunk_polytopes(i).yv'+vel_this_poly(2) final_time*ones(num_verts,1) vert_ids]; % place each vert at orig position, plus translation distance, at time final_time
        time_space_polytopes(i).vertices = verts;
    end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____       _
%  |  __ \     | |
%  | |  | | ___| |__  _   _  __ _
%  | |  | |/ _ \ '_ \| | | |/ _` |
%  | |__| |  __/ |_) | |_| | (_| |
%  |_____/ \___|_.__/ \__,_|\__, |
%                            __/ |
%                           |___/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

if flag_do_plots
    % set up plot
    figure(fig_num);
    hold on;
    view(3)
    box on;
    INTERNAL_fcn_format_timespace_plot()
    
    % 2d polytopes
    plotFormat.Color = 'blue';
    plotFormat.LineWidth = 2;
    fcn_MapGen_plotPolytopes(shrunk_polytopes, plotFormat, [1 0 0 0 1], fig_num);

    % 3d plot
    for i = 1:length(time_space_polytopes)
        plot3(time_space_polytopes(i).vertices(:,1), time_space_polytopes(i).vertices(:,2), time_space_polytopes(i).vertices(:,3), 'k.','MarkerSize',20);
    end
end 

end % end function

%% Functions follow
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   ______                _   _
%  |  ____|              | | (_)
%  | |__ _   _ _ __   ___| |_ _  ___  _ __  ___
%  |  __| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
%  | |  | |_| | | | | (__| |_| | (_) | | | \__ \
%  |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
%
% See: https://patorjk.com/software/taag/#p=display&f=Big&t=Functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ยง

function INTERNAL_fcn_format_timespace_plot()
    % define figure properties
    % opts.width      = 8.8;
    % opts.height     = 6;
    % opts.fontType   = 'Times New Roman';
    % opts.fontSize   = 14;
    % fig = gcf;
    % % scaling
    % fig.Units               = 'centimeters';
    % fig.Position(3)         = opts.width;
    % fig.Position(4)         = opts.height;
    
    % % set text properties
    % set(fig.Children, ...
    %     'FontName',     'Times New Roman', ...
    %     'FontSize',     14);
    
    % remove unnecessary white space
    set(gca,'LooseInset',max(get(gca,'TightInset'), 0.02))
    xlabel('x [km]')
    ylabel('y [km]')
    zlabel('t [min]')
    view([36 30])
end
